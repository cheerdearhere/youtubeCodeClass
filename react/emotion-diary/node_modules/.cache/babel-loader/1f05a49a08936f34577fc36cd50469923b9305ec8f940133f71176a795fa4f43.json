{"ast":null,"code":"import _objectSpread from\"/Users/choikmacbookair/Desktop/workspace/youtubeWorks/react/emotion-diary/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _slicedToArray from\"/Users/choikmacbookair/Desktop/workspace/youtubeWorks/react/emotion-diary/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useState}from\"react\";import{useNavigate}from\"react-router-dom\";import MyButton from\"./MyButton\";import DiaryItem from\"./DiaryItem\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var sortOptionList=[{value:\"latest\",name:\"최신순\"},{value:\"oldest\",name:\"오래된 순\"}];var filterOptionList=[{value:\"all\",name:\"전부 다\"},{value:\"good\",name:\"좋은 감정만\"},{value:\"bad\",name:\"안좋은 감정만\"}];//diaryList의 정렬을 담당할 input들\nvar ControlMenu=/*#__PURE__*/React.memo(function(_ref){var value=_ref.value,_onChange=_ref.onChange,optionList=_ref.optionList;return/*#__PURE__*/_jsx(\"select\",{className:\"ControlMenu\",value:value,onChange:function onChange(e){_onChange(e.target.value);},children:optionList.map(function(it,idx){return/*#__PURE__*/_jsx(\"option\",{value:it.value,children:it.name},idx);})});});var DiaryList=function DiaryList(_ref2){var diaryList=_ref2.diaryList;var _useState=useState(\"latest\"),_useState2=_slicedToArray(_useState,2),sortType=_useState2[0],setSortType=_useState2[1];var _useState3=useState(\"all\"),_useState4=_slicedToArray(_useState3,2),filter=_useState4[0],setFilter=_useState4[1];var navigate=useNavigate();//sort+filter\nvar getProcessedDiaryList=function getProcessedDiaryList(){//time compare\nvar compare=function compare(a,b){//parseInt: string으로 들어올 수 있음 '123'\nif(sortType===\"latest\"){return parseInt(b.date)-parseInt(a.date);}else{return parseInt(a.date)-parseInt(b.date);}};//but 원본의 변동없이하기위해 사본생성(깊은 복사)\nvar copyList=JSON.parse(JSON.stringify(diaryList));//emotion에 따른 변환\nvar filterCallback=function filterCallback(item){if(filter===\"good\"){return parseInt(item.emotion)<=3;}else{return parseInt(item.emotion)>3;}};//filterCallback이 true로 반환하는 것만 표시\nvar filteredList=filter===\"all\"?copyList:copyList.filter(function(it){return filterCallback(it);});var sortedList=filteredList.sort(compare);return sortedList;};return/*#__PURE__*/_jsxs(\"div\",{className:\"DiaryList\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"menu_wrapper\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"left_col\",children:[/*#__PURE__*/_jsx(ControlMenu,{value:sortType,onChange:setSortType,optionList:sortOptionList}),/*#__PURE__*/_jsx(ControlMenu,{value:filter,onChange:setFilter,optionList:filterOptionList})]}),/*#__PURE__*/_jsx(\"div\",{className:\"right_col\",children:/*#__PURE__*/_jsx(MyButton,{type:\"positive\",text:\"새 일기 쓰기\",onClick:function onClick(){return navigate(\"/new\");}})})]}),// map으로 처리할 것이 jsx이면 {}보다 ()가 좋음\n//dataList보다 sort처리 후 list 사용\ngetProcessedDiaryList().map(function(it){return/*#__PURE__*/_jsx(DiaryItem,_objectSpread({},it),it.id);})]});};DiaryList.defaultProps={diaryList:[]};export default DiaryList;","map":{"version":3,"names":["React","useState","useNavigate","MyButton","DiaryItem","jsx","_jsx","jsxs","_jsxs","sortOptionList","value","name","filterOptionList","ControlMenu","memo","_ref","onChange","optionList","className","e","target","children","map","it","idx","DiaryList","_ref2","diaryList","_useState","_useState2","_slicedToArray","sortType","setSortType","_useState3","_useState4","filter","setFilter","navigate","getProcessedDiaryList","compare","a","b","parseInt","date","copyList","JSON","parse","stringify","filterCallback","item","emotion","filteredList","sortedList","sort","type","text","onClick","_objectSpread","id","defaultProps"],"sources":["/Users/choikmacbookair/Desktop/workspace/youtubeWorks/react/emotion-diary/src/components/DiaryList.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport MyButton from \"./MyButton\";\r\nimport DiaryItem from \"./DiaryItem\";\r\n\r\nconst sortOptionList = [\r\n  { value: \"latest\", name: \"최신순\" },\r\n  { value: \"oldest\", name: \"오래된 순\" },\r\n];\r\nconst filterOptionList = [\r\n  { value: \"all\", name: \"전부 다\" },\r\n  { value: \"good\", name: \"좋은 감정만\" },\r\n  { value: \"bad\", name: \"안좋은 감정만\" },\r\n];\r\n\r\n//diaryList의 정렬을 담당할 input들\r\nconst ControlMenu = React.memo(({ value, onChange, optionList }) => {\r\n  return (\r\n    <select\r\n      className=\"ControlMenu\"\r\n      value={value}\r\n      onChange={(e) => {\r\n        onChange(e.target.value);\r\n      }}\r\n    >\r\n      {optionList.map((it, idx) => (\r\n        <option value={it.value} key={idx}>\r\n          {it.name}\r\n        </option>\r\n      ))}\r\n    </select>\r\n  );\r\n});\r\n\r\nconst DiaryList = ({ diaryList }) => {\r\n  const [sortType, setSortType] = useState(\"latest\");\r\n  const [filter, setFilter] = useState(\"all\");\r\n  const navigate = useNavigate();\r\n\r\n  //sort+filter\r\n  const getProcessedDiaryList = () => {\r\n    //time compare\r\n    const compare = (a, b) => {\r\n      //parseInt: string으로 들어올 수 있음 '123'\r\n      if (sortType === \"latest\") {\r\n        return parseInt(b.date) - parseInt(a.date);\r\n      } else {\r\n        return parseInt(a.date) - parseInt(b.date);\r\n      }\r\n    };\r\n    //but 원본의 변동없이하기위해 사본생성(깊은 복사)\r\n    const copyList = JSON.parse(JSON.stringify(diaryList));\r\n\r\n    //emotion에 따른 변환\r\n    const filterCallback = (item) => {\r\n      if (filter === \"good\") {\r\n        return parseInt(item.emotion) <= 3;\r\n      } else {\r\n        return parseInt(item.emotion) > 3;\r\n      }\r\n    };\r\n    //filterCallback이 true로 반환하는 것만 표시\r\n    const filteredList =\r\n      filter === \"all\" ? copyList : copyList.filter((it) => filterCallback(it));\r\n\r\n    const sortedList = filteredList.sort(compare);\r\n    return sortedList;\r\n  };\r\n  return (\r\n    <div className=\"DiaryList\">\r\n      <div className=\"menu_wrapper\">\r\n        <div className=\"left_col\">\r\n          <ControlMenu\r\n            value={sortType}\r\n            onChange={setSortType}\r\n            optionList={sortOptionList}\r\n          />\r\n          <ControlMenu\r\n            value={filter}\r\n            onChange={setFilter}\r\n            optionList={filterOptionList}\r\n          />\r\n        </div>\r\n        <div className=\"right_col\">\r\n          <MyButton\r\n            type={\"positive\"}\r\n            text={\"새 일기 쓰기\"}\r\n            onClick={() => navigate(\"/new\")}\r\n          />\r\n        </div>\r\n      </div>\r\n      {\r\n        // map으로 처리할 것이 jsx이면 {}보다 ()가 좋음\r\n        //dataList보다 sort처리 후 list 사용\r\n        getProcessedDiaryList().map((it) => (\r\n          <DiaryItem key={it.id} {...it} />\r\n        ))\r\n      }\r\n    </div>\r\n  );\r\n};\r\nDiaryList.defaultProps = {\r\n  diaryList: [],\r\n};\r\nexport default DiaryList;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}